{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./Lorelei/Logger.js","webpack:///./Lorelei/Presenter.js","webpack:///./Lorelei/Model.js","webpack:///./src/scripts/presenters/FormPresenter.js","webpack:///./src/scripts/models/FormModel.js","webpack:///./src/scripts/views/FormView.js","webpack:///./src/scripts/views/LogView.js","webpack:///./src/scripts/index.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","configurable","enumerable","get","r","value","n","__esModule","object","property","prototype","hasOwnProperty","p","s","Lorelei_Logger","[object Object]","this","logs","subscribers","addSubscriber","bind","log","logNumber","length","push","subscriber","Presenter_Presenter","view","model","eventsConnectors","options","super","initConnectors","initConnector","connectorType","isLogging","connectors","source","target","Error","forEach","connector","events","in","saveLog","makeLog","out","communicators","split","map","toLowerCase","Lorelei_Presenter","createDefaultEvents","elementForEvents","handleGetModelData","handler","addEventListener","e","detail","Lorelei_Model","data","assign","makeEvent","newData","eventName","event","CustomEvent","dispatchEvent","FormPresenter_eventsConnectors","viewToModel","modelToModel","modelToView","presenters_FormPresenter","FormModel_elementForEvents","document","createElement","FormModel_events","handleDataSentToServer","handleReceivedDataByServer","models_FormModel","addEvents","updateModelData","setTimeout","dataByServer","formElement","getElementsByClassName","formButtonElement","formInputElement","formAnswerElement","FormView_events","handleSendToServer","views_FormView","elements","innerText","logElement","views_LogView","element","dataFromLogs","updateByLogger","updateView","newLogs","join","scripts_formPresenter","connectToLogger","getLoggerPublisher"],"mappings":"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","file":"./js/bundle.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 2);\n","class Logger {\n  constructor() {\n    this.logs = [];\n    this.subscribers = [];\n    this.addSubscriber = this.addSubscriber.bind(this);\n  }\n\n  /**\n   * Метод для получения элементами возможности подписаться на \n   * изменения в логгере\n   */\n  getLoggerPublisher() {\n    return this.addSubscriber;\n  }\n\n  /**\n   * Обработка и сохранение лога\n   * @param {string} log\n   */\n  saveLog(log) {\n    const logNumber = this.logs.length;\n    this.logs.push(`${logNumber}. ${log}`);\n    for (let i = 0; i < this.subscribers.length; i++) {\n      const subscriber = this.subscribers[i];\n      subscriber(this.logs);\n    }\n  }\n\n  /**\n   * Добавление подписчика на изменения в Store\n   * @param {function} subscriber \n   */\n  addSubscriber(subscriber) {\n    this.subscribers.push(subscriber);\n    subscriber(this.logs);\n  }\n}\n\nexport default Logger;\n","import Logger from './Logger';\n\nclass Presenter extends Logger {\n  constructor(view, model, eventsConnectors, options) {\n    super();\n    this.view = view;\n    this.model = model;\n    this.eventsConnectors = eventsConnectors;\n    this.initConnectors = this.initConnectors.bind(this);\n    this.options = options;\n    this.initConnectors();\n  }\n\n  /**\n   * инициализация коннекторов\n   */\n  initConnectors() {\n    this.initConnector('viewToModel');\n    this.initConnector('modelToView');\n    this.initConnector('modelToModel');\n  }\n\n  /**\n   * Связывание событий из источника с методом из цели\n   * @param {string} connectorType \n   */\n  initConnector(connectorType) {\n    const {\n      view,\n      model,\n      eventsConnectors,\n      options,\n    } = this;\n    const { isLogging } = options;\n    const connectors = eventsConnectors[connectorType];\n    if (!connectors.length) {\n      return;\n    }\n\n    let source;\n    let target;\n    switch (connectorType) {\n      case 'viewToModel':\n        source = view;\n        target = model;        \n        break;\n      case 'modelToView':\n        source = model;\n        target = view;\n        break;\n      case 'modelToModel':\n        source = model;\n        target = model;\n        break;\n      default:\n        throw new Error('фреймворк не знает о предоставленном типе коннектора');\n    }\n\n    connectors.forEach((connector) => {\n      source.events[connector.in]((value) => {\n        if (isLogging) {\n          this.saveLog(Presenter.makeLog(connectorType, connector));\n        }\n        target[connector.out](value);\n      });\n    });\n  }\n\n  /**\n   * создание лога\n   * @param {string} connectorType \n   * @param {object} connector \n   */\n  static makeLog(connectorType, connector) {\n    const communicators = connectorType.split('To').map(c => c.toLowerCase());\n    return `Presenter: -> на событие ${connector.in} из ${communicators[0]} \\\n      срабатывает метод ${connector.out} из ${communicators[1]}`;\n  }\n}\n\nexport default Presenter;\n","const createDefaultEvents = elementForEvents => ({\n  handleGetModelData: (handler) => {\n    elementForEvents.addEventListener('getModelData', (e) => {\n      handler(e.detail);\n    });\n  },\n});\n\nclass Model {\n  constructor(data, elementForEvents) {\n    this.data = data;\n    this.elementForEvents = elementForEvents;\n    this.events = createDefaultEvents(elementForEvents);\n  }\n\n  addEvents(events) {\n    this.events = Object.assign(this.events, events);\n  }\n\n  getModelData() {\n    this.makeEvent('getModelData', this.data);\n  }\n\n  updateModelData(newData) {\n    this.data = newData;\n  }\n\n  makeEvent(eventName, data) {\n    const event = new CustomEvent(eventName, { detail: data });\n    this.elementForEvents.dispatchEvent(event);\n  }\n}\n\nexport default Model;\n","import { Presenter } from '../../../Lorelei';\n\nconst eventsConnectors = {\n  viewToModel: [\n    {\n      in: 'handleSendToServer',\n      out: 'sendDataToServer',\n    },\n  ],\n  modelToModel: [\n    {\n      in: 'handleDataSentToServer',\n      out: 'getModelData',\n    },\n    {\n      in: 'handleReceivedDataByServer',\n      out: 'getModelData',\n    },\n  ],\n  modelToView: [\n    {\n      in: 'handleGetModelData',\n      out: 'updateView',\n    },\n  ],\n};\n\nclass FormPresenter extends Presenter {\n  constructor(view, model, options) {\n    super(view, model, eventsConnectors, options);\n  }\n}\n\nexport default FormPresenter;\n","import { Model } from '../../../Lorelei';\n\nconst elementForEvents = document.createElement('div');\n\nconst events = {\n  handleDataSentToServer: (handler) => {\n    elementForEvents.addEventListener('dataSentToServer', (e) => {\n      handler(e.detail);\n    });\n  },\n\n  handleReceivedDataByServer: (handler) => {\n    elementForEvents.addEventListener('dataReceivedByServer', (e) => {\n      handler(e.detail);\n    });\n  },\n};\n\nclass FormModel extends Model {\n  constructor() {\n    super(null, elementForEvents);\n    this.addEvents(events);\n  }\n\n  /**\n   * Отправка данных из формы на сервер\n   * @param {string} value \n   */\n  sendDataToServer(value) {\n    // данные отправлены\n    this.updateModelData('данные отправлены, ждем ответа');\n    this.makeEvent('dataSentToServer');\n\n    \n    setTimeout(() => {\n      // оповестим что все еще ждем\n      this.updateModelData('Долго ждем ответа');\n      this.makeEvent('dataSentToServer');\n    }, 2000);\n\n    setTimeout(() => {\n      // данные получены\n      let dataByServer = 'Сервер хотел получить сообщение, но до него дошла лишь пустота.';\n      if (value.length) {\n        dataByServer = 'Сервер получил ваше сообщение.';\n      }\n      this.updateModelData(dataByServer);\n      this.makeEvent('dataReceivedByServer');\n    }, 4000); \n  }\n}\n\nexport default FormModel;\n","const formElement = document.getElementsByClassName('view-stub')[0];\nconst formButtonElement = document.getElementsByClassName('view-stub__apply')[0];\nconst formInputElement = document.getElementsByClassName('view-stub__input')[0];\nconst formAnswerElement = document.getElementsByClassName('view-stub__label')[0];\n\nconst events = {\n  handleSendToServer: (handler) => {\n    formButtonElement.addEventListener('click', () => {\n      handler(formInputElement.value);\n    });\n  },\n};\n\nclass FormView {\n  constructor() {\n    this.elements = {\n      formElement,\n      formButtonElement,\n      formInputElement,\n      formAnswerElement,\n    };\n    this.events = events;\n  }\n\n  /**\n   * Изменение DOM\n   * @param {string} data \n   */\n  updateView(data) {\n    this.elements.formAnswerElement.innerText = data;\n  }\n}\n\n\nexport default FormView;\n\n","const logElement = document.getElementsByClassName('log')[0];\n\nclass LogView {\n  constructor() {\n    this.element = logElement;\n    this.dataFromLogs = {};\n    this.updateByLogger = this.updateByLogger.bind(this);\n    this.updateView = this.updateView.bind(this);\n  }\n\n  /**\n   * Соединение с логгером\n   * @param {function} addSubscriber\n   */\n  connectToLogger(addSubscriber) {\n    addSubscriber(this.updateByLogger);\n  }\n\n  /**\n   * Функция, вызывающаяся при обновлении логгера\n   * @param {array} newLogs \n   */\n  updateByLogger(newLogs) {\n    this.dataFromLogs = { ...this.dataFromLogs, newLogs };\n    if (newLogs) {\n      this.updateView(newLogs);\n    }\n  }\n\n  /**\n   * Изменение DOM\n   */\n  updateView(newLogs) {\n    const logs = newLogs;\n    this.element.innerText = logs.join('\\n');\n  }\n}\n\nexport default LogView;\n\n","import FormPresenter from './presenters/FormPresenter';\nimport FormModel from './models/FormModel';\n\nimport FormView from './views/FormView';\nimport LogView from './views/LogView';\n\nconst formView = new FormView();\n\nconst formModel = new FormModel();\n\nconst isLogging = true;\nconst formPresenter = new FormPresenter(formView, formModel, { isLogging });\n\n// создаем view для логирования\nconst logView = new LogView();\nlogView.connectToLogger(formPresenter.getLoggerPublisher());\n\n"],"sourceRoot":""}